<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-02-24T14:32:56+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">A Simple Programmer</title><subtitle>This is my new website</subtitle><entry><title type="html">java反射相关知识</title><link href="http://localhost:4000/about-java-reflection" rel="alternate" type="text/html" title="java反射相关知识" /><published>2015-01-22T00:00:00+08:00</published><updated>2015-01-22T00:00:00+08:00</updated><id>http://localhost:4000/about-java-reflection</id><content type="html" xml:base="http://localhost:4000/about-java-reflection">&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法。对于任意一个对象，都能够调用它的任意一个方法和属性。这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;涉及到的类&lt;/strong&gt;
     java.lang.Class 、java.lang.reflect 包中相关的类，包括Constructor、Field、Method、Modifier
获取Class的方法
    Class 类十分特殊，它和一般类一样继承自Object。其实体用以表达Java程序运行时的classes和interfaces，也用来表达enum、array、primitive Java types（boolean, byte, char, short, int, long, float, double）以及关键词void。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;获取类名的方法&lt;/strong&gt;
 每个类都继承于Object，通过Object的getClass方法获取，如new String().getClass(),这种用法要首先知道用的是哪个类再获取Class
 利用Class.forName(className),这个是最常用的，可以通过类的全名获取类，之后再进行其它的反射操作。所有的反射操作都是基于Class来操作的。
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proxyandreflection.Person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		
      &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGetClassException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getFields()
getMethods()
getField(String)
getDeclaredField()
getDeclaredFields()
getMethods()
getDeclaredMethods()
getMethod(String, Class&amp;lt;?&amp;gt;...)
getDeclaredMethod(String, Class&amp;lt;?&amp;gt;...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;图中的方法都是反射编程中会用到的，其中每个方法基本上都有两个实现，有Declared及没有Declared的，如getFields getDeclaredFields,区别就是没有Declared的方法，只能获取public修饰的相关内容，而有Declared的方法则可以获取所有的相关内容不只是public的&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /**
   * 测试反射方法 getFields与getDeclaredFields的区别，其它Methods、Constructor也一样
   * @throws ClassNotFoundException
   */
  @Test
  public void test4Declared() throws ClassNotFoundException{
      Class&amp;lt;?&amp;gt; s = Class.forName(&quot;proxyandreflection.Person&quot;);
      Field[] fields1 = s.getDeclaredFields();
      Field[] fields2 = s.getFields();
      assertNotEquals(fields1.length,fields2.length);
		
      for(Field f1 : fields1){
          System.out.print(Modifier.toString(f1.getModifiers())+&quot; &quot;+f1.getName()+&quot;;&quot;);
      }
      System.out.println();
		
      for(Field f2 : fields2){
          System.out.print(Modifier.toString(f2.getModifiers())+&quot; &quot;+f2.getName()+&quot;;&quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对类进行实例化&lt;/strong&gt;
对于无参数构造函数直接调用s.newInstance()即可
对于有参数的构造函数则要先调用getConstructor生成构造器，然后再操作
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Test
  public void testInstance() throws Exception{
      Class&amp;lt;?&amp;gt; s = Class.forName(&quot;proxyandreflection.Person&quot;);
      assertTrue(s.newInstance() instanceof Person);
  }
	
  @Test
  public void testConstructor() throws Exception{
      Class&amp;lt;?&amp;gt; s = Class.forName(&quot;interview.proxyandreflection.Person&quot;);
      Constructor&amp;lt;?&amp;gt; c = s.getConstructor(String.class);
      Person person = (Person)c.newInstance(&quot;jackie&quot;);
      assertEquals(person.getName(),&quot;jackie&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;动态执行方法&lt;/strong&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Test
  public void testMethodInvoke() throws Exception{
      Class&amp;lt;?&amp;gt; s = Class.forName(&quot;interview.proxyandreflection.Person&quot;);
      Object obj = s.newInstance();
      Method setmethod = s.getDeclaredMethod(&quot;setMobileno&quot;, String.class);
      Method getmethod = s.getDeclaredMethod(&quot;getMobileno&quot;);
      setmethod.invoke(obj, &quot;jackie&quot;);
      assertEquals(getmethod.invoke(obj),&quot;jackie&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;
框架类应用为了适应各种需求，要动态处理大量的使用反射。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;
动态处理类、方法等的调用，难于跟踪调试
反射包括了一些动态类型，所以JVM无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。
我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。
代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，降低可移植性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然也不必过分担心，当反射代码被执行多次后，jvm会把它生成本地代码。&lt;/p&gt;</content><author><name></name></author><summary type="html">JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法。对于任意一个对象，都能够调用它的任意一个方法和属性。这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</summary></entry><entry><title type="html">Linux上的free命令详解</title><link href="http://localhost:4000/about-linux-free" rel="alternate" type="text/html" title="Linux上的free命令详解" /><published>2014-06-21T00:00:00+08:00</published><updated>2014-06-21T00:00:00+08:00</updated><id>http://localhost:4000/about-linux-free</id><content type="html" xml:base="http://localhost:4000/about-linux-free">&lt;p&gt;本文简要的说明Linux free命令中的buffer和cached是怎么回事。最近闲来无事，在应用服务器上执行了一下 free -m,出来下面的内容。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;free -m

            total       used       free     shared    buffers     cached
Mem:         15951      15647        303          0        323       9708
-/+ buffers/cache:       5615      10335
Swap:         4031         40       3991
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一看不对内存只剩303M，这是要死的节奏呀。于是乎上网查了一下此命令，才发现之前一直误解used、free这几个值的意思。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mem这行是操作系统认为已使用和剩余的内存值&lt;/li&gt;
  &lt;li&gt;-/+ buffers/cache: 这个是实际使用的内存值&lt;/li&gt;
  &lt;li&gt;A buffer is something that has yet to be “written” to disk.&lt;/li&gt;
  &lt;li&gt;A cache is something that has been “read” from the disk and stored for later use.&lt;/li&gt;
  &lt;li&gt;buffer是用于存放要输出到disk（块设备）的数据的，而cache是存放从disk上读出的数据。这二者是为了提高IO性能的,弥补快速的内存和磁盘之间的速度差。&lt;/li&gt;
  &lt;li&gt;当内存空间不够用的时候，会从buffer、cached中再拿回来，给对应的进程使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/coldplayerest/archive/2010/02/20/1669949.html&quot;&gt;Linux上的free命令详解&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">本文简要的说明Linux free命令中的buffer和cached是怎么回事。最近闲来无事，在应用服务器上执行了一下 free -m,出来下面的内容。</summary></entry></feed>